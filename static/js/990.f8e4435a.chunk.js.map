{"version":3,"file":"static/js/990.f8e4435a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/Contacts/ContactsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/FormPhoneBook/FormPhoneBook.module.css?2bb4","components/FormPhoneBook/FormPhoneBook.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"Contacts_contactsList__g3sDu\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactsItem\":\"ContactItem_contactsItem__KXP24\",\"contactsBtn\":\"ContactItem_contactsBtn__y2udP\"};","import Style from './ContactItem.module.css';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/operations';\nimport { useDispatch } from 'react-redux';\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <li className={Style.contactsItem}>\n      <p className={Style.contactsText}>\n        {name}: <span>{number}</span>\n      </p>\n\n      <button\n        className={Style.contactsBtn}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\nexport default ContactItem;\n","import Style from './Contacts.module.css';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { selectContact } from 'redux/selectors';\n\nconst ContactList = () => {\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContact);\n\n  const filtredContacts = () => {\n    if (filter) {\n      const normalizedFilter = filter.toLowerCase();\n      if (contacts.length !== 0) {\n        return contacts.filter(contact =>\n          contact.name.toLowerCase().includes(normalizedFilter)\n        );\n      }\n    }\n    return contacts;\n  };\n  const contactsFiltred = filtredContacts();\n\n  return (\n    <ul className={Style.contactsList}>\n      {contactsFiltred &&\n        contactsFiltred.map(({ id, name, number }) => {\n          return <ContactItem id={id} key={id} name={name} number={number} />;\n        })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"labelFilter\":\"Filter_labelFilter__7SBy1\",\"inputFilter\":\"Filter_inputFilter__8QMOp\"};","import { v4 as uuidv4 } from 'uuid';\nimport Style from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\n\nconst searchId = uuidv4();\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <>\n      <label htmlFor={searchId} className={Style.labelFilter}>\n        Find contacts by name\n        <input\n          className={Style.inputFilter}\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={evt => dispatch(setFilter(evt.target.value))}\n          id={searchId}\n        />\n      </label>\n    </>\n  );\n};\n\n// Filter.propTypes = {\n//   value: PropTypes.string,\n// };\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormPhoneBook_form__yQL86\",\"formLabel\":\"FormPhoneBook_formLabel__xZwCV\",\"inputForm\":\"FormPhoneBook_inputForm__nY8mH\",\"btnForm\":\"FormPhoneBook_btnForm__8koVE\"};","import { v4 as uuidv4 } from 'uuid';\nimport Style from './FormPhoneBook.module.css';\n// import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n// import { addNewContact } from 'redux/contactSlice';\nimport { addContact } from 'redux/operations';\nimport { useSelector } from 'react-redux';\nimport { selectContact } from 'redux/selectors';\nimport { Notify } from 'notiflix';\n\nconst FormPhoneBook = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const NameInputFormId = uuidv4();\n  const NumberInputFormId = uuidv4();\n  const contacts = useSelector(selectContact);\n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        throw new Error(\"There isn't such option\");\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (contacts.find(contact => contact.name === name)) {\n      Notify.failure(`${name} is already in contacts.`);\n      return;\n    } else if (contacts.find(contact => contact.number === number)) {\n      Notify.failure(`${number} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={Style.form}>\n      <label className={Style.formLabel} htmlFor={NameInputFormId}>\n        Name\n        <input\n          id={NameInputFormId}\n          className={Style.inputForm}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label className={Style.formLabel} htmlFor={NumberInputFormId}>\n        Number\n        <input\n          id={NumberInputFormId}\n          className={Style.inputForm}\n          type=\"tel\"\n          placeholder=\"Enter number\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button type=\"submit\" className={Style.btnForm}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\n// FormPhoneBook.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\nexport default FormPhoneBook;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectIsLoading } from 'redux/selectors';\nimport { selectError } from 'redux/selectors';\nimport { selectContact } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\n// import { Helmet } from 'react-helmet-async';\nimport ContactList from 'components/Contacts/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport FormPhoneBook from 'components/FormPhoneBook/FormPhoneBook';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContact);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      {/* <Helmet> */}\n      <h1>Your contacts</h1>\n      {/* </Helmet> */}\n      <div>\n        <FormPhoneBook />\n      </div>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      {contacts.length > 0 && <ContactList />}\n      {/* <ContactList /> */}\n    </div>\n  );\n};\nexport default Contacts;\n"],"names":["id","name","number","dispatch","useDispatch","className","Style","type","onClick","deleteContact","filter","useSelector","selectFilter","contacts","selectContact","contactsFiltred","normalizedFilter","toLowerCase","length","contact","includes","filtredContacts","map","searchId","uuidv4","htmlFor","value","onChange","evt","setFilter","target","useState","setName","setNumber","NameInputFormId","NumberInputFormId","handleChange","Error","onSubmit","preventDefault","find","Notify","addContact","placeholder","pattern","required","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts"],"sourceRoot":""}